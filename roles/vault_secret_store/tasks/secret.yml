- name: Read existing Vault secret (if exists)
  ansible.builtin.uri:
    url: "{{ vault_addr }}/v1/{{ vault_mount_point }}/data/{{ vault_secret.name }}"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
    return_content: true
    status_code: [200, 404]
  register: vault_read
  failed_when: vault_read.status not in [200, 404]

- name: Set secret exists flag
  ansible.builtin.set_fact:
    secret_exists: "{{ vault_read.status == 200 }}"

- name: Initialize secret_needs_update
  set_fact:
    secret_needs_update: true

- name: Compare existing secret data (if exists)
  set_fact:
    secret_needs_update: >-
      {{ (vault_read.json.data.data | default({})) != vault_secret.data }}
  when: secret_exists

- name: Create Vault secret
  when: not secret_exists
  ansible.builtin.uri:
    url: "{{ vault_addr }}/v1/{{ vault_mount_point }}/data/{{ vault_secret.name }}"
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      data: "{{ vault_secret.data }}"
    status_code: 200

- name: Update Vault secret
  when: secret_needs_update and force_update
  ansible.builtin.uri:
    url: "{{ vault_addr }}/v1/{{ vault_mount_point }}/data/{{ vault_secret.name }}"
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      data: "{{ vault_secret.data }}"
    status_code: 200