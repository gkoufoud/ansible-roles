- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      - base_dir is defined
    fail_msg: >
      Required variables not set. Ensure you define 'base_dir'.

# - name: Get current group name
#   ansible.builtin.command: id -gn
#   register: current_user_group
#   changed_when: false

- name: Install prerequisites
  apt:
    name:
      - jq
    state: present

- name: Create vault directories
  file:
    path: "{{ base_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - ''
    - data
    - tokens

- name: Render vault configuration
  template:
    src: "vault_config.json.j2"
    dest: "{{ base_dir }}/vault_config.json"
    mode: '0644'
  vars:
    default_lease_ttl: "{{ default_lease_ttl }}"
    max_lease_ttl: "{{ max_lease_ttl }}"

- name: Change ownership of data folder (vault userid/groupid)
  ansible.builtin.file:
    path: "{{ base_dir }}/data"
    owner: "{{ userid }}"
    group: "{{ groupid }}"
    recurse: yes

- name: Start vault container
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: "{{ image }}"
    capabilities:
      - "IPC_LOCK"
    restart_policy: unless-stopped
    state: started
    published_ports:
      - "{{ listen_port }}:8200/tcp"
    volumes:
      - "{{ base_dir }}/vault_config.json:/vault/config/vault_config.json:ro"
      - "{{ base_dir }}/data:/data:rw"
    command: server

- name: Check Vault status
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/health"
    method: GET
    status_code: 200, 429, 472, 473, 501, 503
    return_content: false
  register: vault_health
  failed_when: false  # we want to continue even if it's 501
  retries: 10
  delay: 1
  until: vault_health.status is defined and vault_health.status != -1

- name: Save Vault initialization credentials
  when: vault_health.status == 501
  block:

    - name: Initialize Vault via API
      ansible.builtin.uri:
        url: "http://127.0.0.1:8200/v1/sys/init"
        method: POST
        body_format: json
        body:
          secret_shares: 1
          secret_threshold: 1
        status_code: 200
      register: vault_init
      no_log: true

    - name: Extract root token and unseal key
      set_fact:
        vault_root_token: "{{ vault_init.json.root_token }}"
        vault_unseal_key: "{{ vault_init.json.keys_base64[0] }}"

    - name: Save Vault root token and unseal key
      ansible.builtin.copy:
        dest: "{{ base_dir }}/tokens/init"
        content: |
          VAULT_ROOT_TOKEN_ID={{ vault_init.json.root_token }}
          VAULT_UNSEAL_KEY={{ vault_init.json.keys_base64[0] }}
        owner: root
        group: root
        mode: '0600'
      no_log: true

- name: Check Vault status (after initialization)
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/health"
    method: GET
    status_code: 200, 503
    return_content: false
  register: vault_health
  failed_when: false  # we want to continue even if it's 501
  retries: 10
  delay: 1
  until: vault_health.status is defined

- name: Read token
  ansible.builtin.slurp:
    path: "{{ base_dir }}/tokens/init"
  register: vault_token_file

- name: Unseal Vault if needed
  when: vault_health.status == 503
  block:

    - name: Extract unseal key from decoded content
      ansible.builtin.set_fact:
        vault_unseal_key: >-
          {{
            (vault_token_file.content | b64decode).splitlines()
            | select('match', '^VAULT_UNSEAL_KEY=')
            | list | first | regex_replace('^VAULT_UNSEAL_KEY=', '')
          }}

    - name: Unseal Vault
      ansible.builtin.uri:
        url: "http://127.0.0.1:8200/v1/sys/unseal"
        method: PUT
        body_format: json
        body:
          key: "{{ vault_unseal_key }}"
        status_code: 200

- name: Extract root token from decoded content
  ansible.builtin.set_fact:
    vault_root_token: >-
      {{
        (vault_token_file.content | b64decode).splitlines()
        | select('match', '^VAULT_ROOT_TOKEN_ID=')
        | list | first | regex_replace('^VAULT_ROOT_TOKEN_ID=', '')
      }}

- name: Create 'vault-admin' policy
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/policy/vault-admin"
    method: PUT
    status_code: 204
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      policy: |
        path "*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }

- name: Create 'vault-reader' policy
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/policy/vault-reader"
    method: PUT
    status_code: 204
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      policy: |
        path "*" {
          capabilities = ["read", "list"]
        }

- name: Create 'homelab-admin' policy
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/policy/homelab-admin"
    method: PUT
    status_code: 204
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      policy: |
        path "homelab/*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }

- name: Create 'homelab-reader' policy
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/policy/homelab-reader"
    method: PUT
    status_code: 204
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      policy: |
        path "homelab/*" {
          capabilities = ["read", "list"]
        }

- name: Check if homelab-admin token file exists
  ansible.builtin.stat:
    path: "{{ base_dir }}/tokens/homelab-admin"
  register: homelab_admin_token_file

- name: Read homelab-admin token from file (if exists)
  when: homelab_admin_token_file.stat.exists
  ansible.builtin.slurp:
    path: "{{ base_dir }}/tokens/homelab-admin"
  register: homelab_admin_token_slurp

- name: Extract token from file (if exists)
  when: homelab_admin_token_file.stat.exists
  ansible.builtin.set_fact:
    homelab_admin_token_id: >-
      {{
        (homelab_admin_token_slurp.content | b64decode).splitlines()
        | select('match', '^HOMELAB_VAULT_TOKEN=')
        | list | first | regex_replace('^HOMELAB_VAULT_TOKEN=', '')
      }}

- name: Check if existing token is valid
  when: homelab_admin_token_id is defined and homelab_admin_token_id != ''
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/auth/token/lookup"
    method: POST
    status_code: 200
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      token: "{{ homelab_admin_token_id }}"
  register: homelab_admin_token_lookup
  failed_when: false
  changed_when: false

- name: Set flag if token is invalid or not found
  set_fact:
    create_homelab_admin_token: >-
      {{
        not homelab_admin_token_file.stat.exists
        or homelab_admin_token_id == ''
        or homelab_admin_token_id is not defined
        or homelab_admin_token_lookup.status != 200
      }}

- name: Create homelab-admin token if missing or invalid
  when: create_homelab_admin_token
  block:

    - name: Create a new token for 'homelab-admin' policy
      ansible.builtin.uri:
        url: "http://127.0.0.1:8200/v1/auth/token/create"
        method: POST
        status_code: 200
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body:
          display_name: "homelab-admin"
          policies: ["homelab-admin"]
          ttl: "0"
          renewable: true
          orphan: true
      register: homelab_admin_token_create
      no_log: true

    - name: Set homelab-admin token fact
      ansible.builtin.set_fact:
        homelab_admin_token_id: "{{ homelab_admin_token_create.json.auth.client_token }}"

    - name: Save homelab-admin token to file
      ansible.builtin.copy:
        dest: "{{ base_dir }}/tokens/homelab-admin"
        content: "HOMELAB_VAULT_TOKEN={{ homelab_admin_token_id }}\n"
        owner: root
        group: root
        mode: '0600'
      no_log: true

- name: Check if secrets engine 'homelab/' is mounted
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/mounts"
    method: GET
    status_code: 200
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    return_content: true
  register: vault_mounts
  changed_when: false

- name: Enable 'homelab/' KV v2 secrets engine if not mounted
  when: "'homelab/' not in (vault_mounts.json | dict2items | map(attribute='key') | list)"
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/mounts/homelab"
    method: POST
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      type: kv
      options:
        version: 2
