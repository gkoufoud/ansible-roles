- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      - base_dir is defined
    fail_msg: >
      Required variables not set. Ensure you define 'base_dir'.

- name: Install prerequisites
  apt:
    name:
      - jq
    state: present

- name: Create vault directories
  file:
    path: "{{ base_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - ''
    - data
    - tokens

- name: Render vault configuration
  template:
    src: "vault_config.json.j2"
    dest: "{{ base_dir }}/vault_config.json"
    mode: '0644'

- name: Change ownership of data folder (vault userid/groupid)
  ansible.builtin.file:
    path: "{{ base_dir }}/data"
    owner: "{{ userid }}"
    group: "{{ groupid }}"
    recurse: yes

- name: Start vault container
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: "{{ image }}"
    capabilities:
      - "IPC_LOCK"
    restart_policy: unless-stopped
    state: started
    published_ports:
      - "{{ listen_port }}:8200/tcp"
    volumes:
      - "{{ base_dir }}/vault_config.json:/vault/config/vault_config.json:ro"
      - "{{ base_dir }}/data:/data:rw"
    command: server

- name: Check Vault status
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/health"
    method: GET
    status_code: 200, 429, 472, 473, 501, 503
    return_content: false
  register: vault_health
  failed_when: false  # we want to continue even if it's 501
  retries: 10
  delay: 1
  until: vault_health.status is defined and vault_health.status != -1

- name: Save Vault initialization credentials
  when: vault_health.status == 501
  block:

    - name: Initialize Vault via API
      ansible.builtin.uri:
        url: "http://127.0.0.1:8200/v1/sys/init"
        method: POST
        body_format: json
        body:
          secret_shares: 1
          secret_threshold: 1
        status_code: 200
      register: vault_init
      no_log: true

    - name: Extract root token and unseal key
      set_fact:
        vault_root_token: "{{ vault_init.json.root_token }}"
        vault_unseal_key: "{{ vault_init.json.keys_base64[0] }}"

    - name: Save Vault root token and unseal key
      ansible.builtin.copy:
        dest: "{{ base_dir }}/tokens/init"
        content: |
          VAULT_ROOT_TOKEN_ID={{ vault_init.json.root_token }}
          VAULT_UNSEAL_KEY={{ vault_init.json.keys_base64[0] }}
        owner: root
        group: root
        mode: '0600'
      no_log: true

- name: Check Vault status (after initialization)
  ansible.builtin.uri:
    url: "http://127.0.0.1:8200/v1/sys/health"
    method: GET
    status_code: 200, 503
    return_content: false
  register: vault_health
  failed_when: false  # we want to continue even if it's 501
  retries: 10
  delay: 1
  until: vault_health.status is defined

- name: Read token
  ansible.builtin.slurp:
    path: "{{ base_dir }}/tokens/init"
  register: vault_token_file

- name: Unseal Vault if needed
  when: vault_health.status == 503
  block:

    - name: Extract unseal key from decoded content
      ansible.builtin.set_fact:
        vault_unseal_key: >-
          {{
            (vault_token_file.content | b64decode).splitlines()
            | select('match', '^VAULT_UNSEAL_KEY=')
            | list | first | regex_replace('^VAULT_UNSEAL_KEY=', '')
          }}

    - name: Unseal Vault
      ansible.builtin.uri:
        url: "http://127.0.0.1:8200/v1/sys/unseal"
        method: PUT
        body_format: json
        body:
          key: "{{ vault_unseal_key }}"
        status_code: 200

- name: Extract root token from decoded content
  ansible.builtin.set_fact:
    vault_root_token: >-
      {{
        (vault_token_file.content | b64decode).splitlines()
        | select('match', '^VAULT_ROOT_TOKEN_ID=')
        | list | first | regex_replace('^VAULT_ROOT_TOKEN_ID=', '')
      }}

- name: Create vault policies
  include_tasks: create_policy.yml
  loop: "{{ policies }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create vault tokens
  include_tasks: create_token.yml
  loop: "{{ tokens }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create kv2 engines
  include_tasks: create_kv2_engines.yml
  loop: "{{ kv2_engines }}"
  loop_control:
    label: "{{ item.name }}"
